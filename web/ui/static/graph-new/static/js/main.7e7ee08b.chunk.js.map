{"version":3,"sources":["globals.ts","components/SanitizeHTML/index.tsx","ExpressionInput.tsx","TimeInput.tsx","utils/timeFormat.ts","GraphControls.tsx","SeriesName.tsx","Legend.tsx","Graph.tsx","Panel.tsx","DataTable.tsx","utils/urlParams.ts","PanelList.tsx","App.tsx","index.tsx"],"names":["window","jQuery","jquery","moment","require","SanitizeHTML","sanitize","html","sanitizeHTML","allowedTags","props","this","inline","children","dangerouslySetInnerHTML","__html","PureComponent","library","add","faSearch","faSpinner","ExpressionInput","prevNoMatchValue","exprInputRef","React","createRef","handleKeyPress","event","key","shiftKey","executeQuery","current","value","preventDefault","renderAutosuggest","downshift","isOpen","inputValue","includes","matches","fuzzy","filter","replace","metricNames","pre","post","length","className","getMenuProps","slice","map","item","index","getItemProps","original","style","backgroundColor","highlightedIndex","fontWeight","selectedItem","string","$exprInput","$","resize","el","get","offset","offsetHeight","clientHeight","css","scrollHeight","on","InputGroup","InputGroupAddon","addonType","InputGroupText","loading","icon","spin","Input","autoFocus","type","rows","onKeyPress","placeholder","innerRef","getInputProps","onKeyDown","nativeEvent","preventDownshiftDefault","closeMenu","blur","Button","color","onClick","Component","faChevronLeft","faChevronRight","faCalendarCheck","faArrowUp","faArrowDown","faTimes","dom","watch","TimeInput","timeInputRef","$time","getBaseTime","time","valueOf","increaseTime","range","onChangeTime","decreaseTime","clearTime","datetimepicker","icons","today","buttons","showClose","showToday","sideBySide","format","locale","timeZone","defaultDate","e","date","size","title","fixedWidth","onFocus","onBlur","rangeUnits","parseRange","rangeText","rangeRE","RegExp","match","parseInt","unit","formatRange","Object","keys","parseTime","timeText","utc","formatTime","faPlus","faMinus","faChartArea","faChartLine","GraphControls","rangeRef","resolutionRef","rangeSteps","onChangeRangeInput","changeRangeInput","onChangeRange","increaseRange","decreaseRange","reverse","prevProps","resolution","toString","Form","onSubmit","defaultValue","endTime","onChangeEndTime","res","onChangeResolution","bsSize","ButtonGroup","onChangeStacking","active","stacked","SeriesName","labels","labelNodes","first","label","push","__name__","tsName","labelStrings","join","renderFormatted","renderPlain","Legend","s","series","renderLegendItem","graphID","PanelType","Graph","id","chartRef","formatValue","y","abs_y","Math","abs","toFixed","Error","str","entityMap","String","escapeHTML","grid","hoverable","clickable","autoHighlight","mouseActiveRadius","legend","show","xaxis","mode","showTicks","showMinorTicks","timeBase","yaxis","tickFormatter","crosshair","tooltip","cssClass","content","xval","yval","flotItem","Date","toUTCString","renderLabels","defaultTheme","lines","stack","lineWidth","steps","fill","shadowSize","colors","colorPool","colorPoolSize","variation","neededColors","data","result","i","c","parse","scale","getColors","ts","pos","params","queryParams","t","startTime","values","parseValue","metric","val","parseFloat","isNaN","plot","destroyPlot","getData","getOptions","chart","undefined","destroy","Alert","resultType","handleWidth","onResize","ref","DataTable","limited","limitSeries","valueText","v","whiteSpace","Table","hover","PanelDefaultOptions","expr","Panel","abortInFlightFetch","options","setOptions","abortController","AbortController","abort","setState","getEndTime","max","floor","url","URL","location","href","pathname","assign","start","end","step","forEach","searchParams","append","fetch","cache","signal","then","resp","json","status","error","lastQueryParams","catch","name","message","handleExpressionChange","handleChangeRange","handleChangeEndTime","handleChangeResolution","handleChangeStacking","state","stats","prevState","prevOpts","opts","newOpts","onOptionsChanged","Row","Col","Nav","tabs","NavItem","NavLink","TabContent","activeTab","TabPane","tabId","removePanel","decodePanelOptionsFromQueryString","query","sortedParams","p","paramFormat","test","sort","panelOpts","prefix","startsWith","addParam","substring","parseParams","split","param","opt","decodeURIComponent","PanelList","addPanel","panels","getKey","updateURL","panel","urlPanels","search","fetchMetricsError","timeDriftError","ok","statusText","browserTime","getTime","serverTime","delta","onpopstate","newPanels","o","panelParams","pp","encodeURIComponent","encodePanelOptionsToQueryString","history","pushState","handleOptionsChanged","App","Container","fluid","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7e7ee08b.chunk.js","sourcesContent":["import jquery from 'jquery';\n\n(window as any).jQuery = jquery;\n(window as any).moment = require('moment');\n","/**\n * SanitizeHTML to render HTML, this takes care of sanitizing HTML.\n */\nimport React, { PureComponent } from 'react';\nimport sanitizeHTML from 'sanitize-html';\n\ninterface SanitizeHTMLProps {\n  inline: Boolean;\n  allowedTags: string[];\n  children: Element | string;\n}\n\nclass SanitizeHTML extends PureComponent<SanitizeHTMLProps> {\n  sanitize = (html: any) => {\n    return sanitizeHTML(html, {\n      allowedTags: this.props.allowedTags\n    });\n  };\n\n  render() {\n    const { inline, children } = this.props;\n    return inline ? (\n      <span dangerouslySetInnerHTML={{ __html: this.sanitize(children) }} />\n    ) : (\n      <div dangerouslySetInnerHTML={{ __html: this.sanitize(children) }} />\n    );\n  }\n}\n\nexport default SanitizeHTML;\n","import $ from 'jquery';\nimport React, { Component } from 'react';\nimport {\n  Button,\n  InputGroup,\n  InputGroupAddon,\n  InputGroupText,\n  Input,\n} from 'reactstrap';\n\nimport Downshift from 'downshift';\nimport fuzzy from 'fuzzy';\nimport SanitizeHTML from './components/SanitizeHTML';\n\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch, faSpinner } from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(faSearch, faSpinner);\n\ninterface ExpressionInputProps {\n  value: string;\n  metricNames: string[];\n  executeQuery: (expr: string) => void;\n  loading: boolean;\n}\n\nclass ExpressionInput extends Component<ExpressionInputProps> {\n  prevNoMatchValue: string | null = null;\n  private exprInputRef = React.createRef<HTMLInputElement>();\n\n  handleKeyPress = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === 'Enter' && !event.shiftKey) {\n      this.props.executeQuery(this.exprInputRef.current!.value);\n      event.preventDefault();\n    }\n  }\n\n  renderAutosuggest = (downshift: any) => {\n    if (!downshift.isOpen) {\n      return null;\n    }\n\n    if (this.prevNoMatchValue && downshift.inputValue.includes(this.prevNoMatchValue)) {\n      return null;\n    }\n\n    let matches = fuzzy.filter(downshift.inputValue.replace(/ /g, ''), this.props.metricNames, {\n      pre: \"<strong>\",\n      post: \"</strong>\",\n    });\n\n    if (matches.length === 0) {\n      this.prevNoMatchValue = downshift.inputValue;\n      return null;\n    }\n\n    return (\n      <ul className=\"autosuggest-dropdown\" {...downshift.getMenuProps()}>\n        {\n          matches\n            .slice(0, 200) // Limit DOM rendering to 100 results, as DOM rendering is sloooow.\n            .map((item, index) => (\n              <li\n                {...downshift.getItemProps({\n                  key: item.original,\n                  index,\n                  item: item.original,\n                  style: {\n                    backgroundColor:\n                      downshift.highlightedIndex === index ? 'lightgray' : 'white',\n                    fontWeight: downshift.selectedItem === item ? 'bold' : 'normal',\n                  },\n                })}\n              >\n                <SanitizeHTML inline={true} allowedTags={['strong']}>\n                  {item.string}\n                </SanitizeHTML>\n              </li>\n            ))\n        }\n      </ul>\n    );\n  }\n\n  componentDidMount() {\n    const $exprInput = $(this.exprInputRef.current!);\n    const resize = () => {\n      const el = $exprInput.get(0);\n      const offset = el.offsetHeight - el.clientHeight;\n      $exprInput.css('height', 'auto').css('height', el.scrollHeight + offset);\n    };\n    resize();\n    $exprInput.on('input', resize);\n  }\n\n  render() {\n    return (\n      <Downshift\n        //inputValue={this.props.value}\n        //onInputValueChange={this.props.onChange}\n        selectedItem={this.props.value}\n      >\n        {(downshift) => (\n          <div>\n            <InputGroup className=\"expression-input\">\n              <InputGroupAddon addonType=\"prepend\">\n                <InputGroupText>\n                {this.props.loading ? <FontAwesomeIcon icon=\"spinner\" spin/> : <FontAwesomeIcon icon=\"search\"/>}\n                </InputGroupText>\n              </InputGroupAddon>\n              <Input\n                autoFocus\n                type=\"textarea\"\n                rows=\"1\"\n                onKeyPress={this.handleKeyPress}\n                placeholder=\"Expression (press Shift+Enter for newlines)\"\n                innerRef={this.exprInputRef}\n                {...downshift.getInputProps({\n                  onKeyDown: (event: React.KeyboardEvent): void => {\n                    switch (event.key) {\n                      case 'Home':\n                      case 'End':\n                        // We want to be able to jump to the beginning/end of the input field.\n                        // By default, Downshift otherwise jumps to the first/last suggestion item instead.\n                        (event.nativeEvent as any).preventDownshiftDefault = true;\n                        break;\n                      case 'ArrowUp':\n                      case 'ArrowDown':\n                        if (!downshift.isOpen) {\n                          (event.nativeEvent as any).preventDownshiftDefault = true;\n                        }\n                        break;\n                      case 'Enter':\n                        downshift.closeMenu();\n                        break;\n                      case 'Escape':\n                        if (!downshift.isOpen) {\n                          this.exprInputRef.current!.blur();\n                        }\n                        break;\n                      default:\n                    }\n                  }\n                } as any)}\n              />\n              <InputGroupAddon addonType=\"append\">\n                <Button\n                  className=\"execute-btn\"\n                  color=\"primary\"\n                  onClick={() => this.props.executeQuery(this.exprInputRef.current!.value)}\n                >\n                  Execute\n                </Button>\n              </InputGroupAddon>\n            </InputGroup>\n            {this.renderAutosuggest(downshift)}\n          </div>\n        )}\n      </Downshift>\n    );\n  }\n}\n\nexport default ExpressionInput;\n","import $ from 'jquery';\nimport React, { Component } from 'react';\nimport { Button, InputGroup, InputGroupAddon, Input } from 'reactstrap';\n\nimport moment from 'moment-timezone';\n\nimport 'tempusdominus-core';\nimport 'tempusdominus-bootstrap-4';\nimport '../node_modules/tempusdominus-bootstrap-4/build/css/tempusdominus-bootstrap-4.min.css';\n\nimport { dom, library } from '@fortawesome/fontawesome-svg-core';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faChevronLeft,\n  faChevronRight,\n  faCalendarCheck,\n  faArrowUp,\n  faArrowDown,\n  faTimes,\n} from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(\n  faChevronLeft,\n  faChevronRight,\n  faCalendarCheck,\n  faArrowUp,\n  faArrowDown,\n  faTimes,\n);\n\n// Sadly needed to also replace <i> within the date picker, since it's not a React component.\ndom.watch();\n\ninterface TimeInputProps {\n  time: number | null; // Timestamp in milliseconds.\n  range: number; // Range in seconds.\n  placeholder: string;\n\n  onChangeTime: (time: number | null) => void;\n}\n\nclass TimeInput extends Component<TimeInputProps> {\n  private timeInputRef = React.createRef<HTMLInputElement>();\n  private $time: any | null = null;\n\n  getBaseTime = (): number => {\n    return this.props.time || moment().valueOf();\n  }\n\n  increaseTime = (): void => {\n    const time = this.getBaseTime() + this.props.range*1000/2;\n    this.props.onChangeTime(time);\n  }\n\n  decreaseTime = (): void => {\n    const time = this.getBaseTime() - this.props.range*1000/2;\n    this.props.onChangeTime(time);\n  }\n\n  clearTime = (): void => {\n    this.props.onChangeTime(null);\n  }\n\n  componentDidMount() {\n    this.$time = $(this.timeInputRef.current!);\n\n    this.$time.datetimepicker({\n      icons: {\n        today: 'fas fa-calendar-check',\n      },\n      buttons: {\n        //showClear: true,\n        showClose: true,\n        showToday: true,\n      },\n      sideBySide: true,\n      format: 'YYYY-MM-DD HH:mm',\n      locale: 'en',\n      timeZone: 'UTC',\n      defaultDate: this.props.time,\n    });\n\n    this.$time.on('change.datetimepicker', (e: any) => {\n      if (e.date) {\n        this.props.onChangeTime(e.date.valueOf());\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this.$time.datetimepicker('destroy');\n  }\n\n  componentDidUpdate() {\n    this.$time.datetimepicker('date', this.props.time ? moment(this.props.time) : null);\n  }\n\n  render() {\n    return (\n      <InputGroup className=\"time-input\" size=\"sm\">\n        <InputGroupAddon addonType=\"prepend\">\n          <Button title=\"Decrease time\" onClick={this.decreaseTime}><FontAwesomeIcon icon=\"chevron-left\" fixedWidth/></Button>\n        </InputGroupAddon>\n\n        <Input\n          placeholder={this.props.placeholder}\n          innerRef={this.timeInputRef}\n          onFocus={() => this.$time.datetimepicker('show')}\n          onBlur={() => this.$time.datetimepicker('hide')}\n          onKeyDown={(e) => ['Escape', 'Enter'].includes(e.key) && this.$time.datetimepicker('hide')}\n        />\n\n        {/* CAUTION: While the datetimepicker also has an option to show a 'clear' button,\n            that functionality is broken, so we create an external solution instead. */}\n        {this.props.time &&\n          <InputGroupAddon addonType=\"append\">\n            <Button className=\"clear-time-btn\" title=\"Clear time\" onClick={this.clearTime}><FontAwesomeIcon icon=\"times\" fixedWidth/></Button>\n          </InputGroupAddon>\n        }\n\n        <InputGroupAddon addonType=\"append\">\n          <Button title=\"Increase time\" onClick={this.increaseTime}><FontAwesomeIcon icon=\"chevron-right\" fixedWidth/></Button>\n        </InputGroupAddon>\n      </InputGroup>\n    );\n  }\n}\n\nexport default TimeInput;\n","import moment from 'moment-timezone';\n\nconst rangeUnits: {[unit: string]: number} = {\n  'y': 60 * 60 * 24 * 365,\n  'w': 60 * 60 * 24 * 7,\n  'd': 60 * 60 * 24,\n  'h': 60 * 60,\n  'm': 60,\n  's': 1\n}\n\nexport function parseRange(rangeText: string): number | null {\n  const rangeRE = new RegExp('^([0-9]+)([ywdhms]+)$');\n  const matches = rangeText.match(rangeRE);\n  if (!matches || matches.length !== 3) {\n    return null;\n  }\n  const value = parseInt(matches[1]);\n  const unit = matches[2];\n  return value * rangeUnits[unit];\n}\n\nexport function formatRange(range: number): string {\n  for (let unit of Object.keys(rangeUnits)) {\n    if (range % rangeUnits[unit] === 0) {\n      return (range / rangeUnits[unit]) + unit;\n    }\n  }\n  return range + 's';\n}\n\nexport function parseTime(timeText: string): number {\n  return moment.utc(timeText).valueOf();\n}\n\nexport function formatTime(time: number): string {\n  return moment.utc(time).format('YYYY-MM-DD HH:mm');\n}\n","import React, { Component } from 'react';\nimport {\n  Button,\n  ButtonGroup,\n  Form,\n  InputGroup,\n  InputGroupAddon,\n  Input,\n} from 'reactstrap';\n\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faPlus,\n  faMinus,\n  faChartArea,\n  faChartLine,\n} from '@fortawesome/free-solid-svg-icons';\n\nimport TimeInput from './TimeInput';\nimport { parseRange, formatRange } from './utils/timeFormat';\n\nlibrary.add(\n  faPlus,\n  faMinus,\n  faChartArea,\n  faChartLine,\n);\n\ninterface GraphControlsProps {\n  range: number;\n  endTime: number | null;\n  resolution: number | null;\n  stacked: boolean;\n\n  onChangeRange: (range: number) => void;\n  onChangeEndTime: (endTime: number | null) => void;\n  onChangeResolution: (resolution: number | null) => void;\n  onChangeStacking: (stacked: boolean) => void;\n}\n\nclass GraphControls extends Component<GraphControlsProps> {\n  private rangeRef = React.createRef<HTMLInputElement>();\n  private resolutionRef = React.createRef<HTMLInputElement>();\n\n  rangeSteps = [\n    1,\n    10,\n    60,\n    5*60,\n    15*60,\n    30*60,\n    60*60,\n    2*60*60,\n    6*60*60,\n    12*60*60,\n    24*60*60,\n    48*60*60,\n    7*24*60*60,\n    14*24*60*60,\n    28*24*60*60,\n    56*24*60*60,\n    365*24*60*60,\n    730*24*60*60,\n  ]\n\n  onChangeRangeInput = (rangeText: string): void => {\n    const range = parseRange(rangeText);\n    if (range === null) {\n      this.changeRangeInput(this.props.range);\n    } else {\n      this.props.onChangeRange(range);\n    }\n  }\n\n  changeRangeInput = (range: number): void => {\n    this.rangeRef.current!.value = formatRange(range);\n  }\n\n  increaseRange = (): void => {\n    for (let range of this.rangeSteps) {\n      if (this.props.range < range) {\n        this.changeRangeInput(range);\n        this.props.onChangeRange(range);\n        return;\n      }\n    }\n  }\n\n  decreaseRange = (): void => {\n    for (let range of this.rangeSteps.slice().reverse()) {\n      if (this.props.range > range) {\n        this.changeRangeInput(range);\n        this.props.onChangeRange(range);\n        return;\n      }\n    }\n  }\n\n  componentDidUpdate(prevProps: GraphControlsProps) {\n    if (prevProps.range !== this.props.range) {\n      this.changeRangeInput(this.props.range);\n    }\n    if (prevProps.resolution !== this.props.resolution) {\n      this.resolutionRef.current!.value = this.props.resolution !== null ? this.props.resolution.toString() : '';\n    }\n  }\n\n  render() {\n    return (\n      <Form inline className=\"graph-controls\" onSubmit={e => e.preventDefault()}>\n        <InputGroup className=\"range-input\" size=\"sm\">\n          <InputGroupAddon addonType=\"prepend\">\n            <Button title=\"Decrease range\" onClick={this.decreaseRange}><FontAwesomeIcon icon=\"minus\" fixedWidth/></Button>\n          </InputGroupAddon>\n\n          <Input\n            defaultValue={formatRange(this.props.range)}\n            innerRef={this.rangeRef}\n            onBlur={() => this.onChangeRangeInput(this.rangeRef.current!.value)}\n          />\n\n          <InputGroupAddon addonType=\"append\">\n            <Button title=\"Increase range\" onClick={this.increaseRange}><FontAwesomeIcon icon=\"plus\" fixedWidth/></Button>\n          </InputGroupAddon>\n        </InputGroup>\n\n        <TimeInput\n          time={this.props.endTime}\n          range={this.props.range}\n          placeholder=\"End time\"\n          onChangeTime={this.props.onChangeEndTime}\n        />\n\n        <Input\n          placeholder=\"Res. (s)\"\n          className=\"resolution-input\"\n          defaultValue={this.props.resolution !== null ? this.props.resolution.toString() : ''}\n          innerRef={this.resolutionRef}\n          onBlur={() => {\n            const res = parseInt(this.resolutionRef.current!.value);\n            this.props.onChangeResolution(res ? res : null);\n          }}\n          bsSize=\"sm\"\n        />\n\n        <ButtonGroup className=\"stacked-input\" size=\"sm\">\n          <Button title=\"Show unstacked line graph\" onClick={() => this.props.onChangeStacking(false)} active={!this.props.stacked}><FontAwesomeIcon icon=\"chart-line\" fixedWidth/></Button>\n          <Button title=\"Show stacked graph\" onClick={() => this.props.onChangeStacking(true)} active={this.props.stacked}><FontAwesomeIcon icon=\"chart-area\" fixedWidth/></Button>\n        </ButtonGroup>\n      </Form>\n    );\n  }\n}\n\nexport default GraphControls;\n","import React, { PureComponent } from \"react\";\n\ninterface SeriesNameProps {\n  labels: {[key: string]: string} | null;\n  format: boolean;\n}\n\nclass SeriesName extends PureComponent<SeriesNameProps> {\n  renderFormatted(): React.ReactNode {\n    const labels = this.props.labels!;\n\n    let labelNodes: React.ReactNode[] = [];\n    let first = true;\n    for (let label in labels) {\n      if (label === '__name__') {\n        continue;\n      }\n\n      labelNodes.push(\n        <span key={label}>\n          {!first && ', '}\n          <span className=\"legend-label-name\">{label}</span>=\n          <span className=\"legend-label-value\">\"{labels[label]}\"</span>\n        </span>\n      );\n\n      if (first) {\n        first = false;\n      }\n    }\n\n    return (\n      <>\n        <span className=\"legend-metric-name\">{labels.__name__ || ''}</span>\n        <span className=\"legend-label-brace\">{'{'}</span>\n          {labelNodes}\n        <span className=\"legend-label-brace\">{'}'}</span>\n      </>\n    );\n  }\n\n  renderPlain() {\n    const labels = this.props.labels!;\n\n    let tsName = (labels.__name__ || '') + '{';\n    let labelStrings: string[] = [];\n    for (let label in labels) {\n      if (label !== '__name__') {\n        labelStrings.push(label + '=\"' + labels[label] + '\"');\n      }\n    }\n    tsName += labelStrings.join(', ') + '}';\n    return tsName;\n  }\n\n  render() {\n    if (this.props.labels === null) {\n      return 'scalar';\n    }\n\n    if (this.props.format) {\n      return this.renderFormatted();\n    }\n    // Return a simple text node. This is much faster to scroll through\n    // for longer lists (hundreds of items).\n    return this.renderPlain();\n  }\n}\n\nexport default SeriesName;\n","import React, { PureComponent } from 'react';\n\nimport SeriesName from './SeriesName';\n\ninterface LegendProps {\n  series: any; // TODO: Type this.\n}\n\nclass Legend extends PureComponent<LegendProps> {\n  renderLegendItem(s: any) {\n    return (\n      <tr key={s.index} className=\"legend-item\">\n        <td>\n          <div className=\"legend-swatch\" style={{backgroundColor: s.color}}></div>\n        </td>\n        <td>\n          <SeriesName labels={s.labels} format={true} />\n        </td>\n      </tr>\n    );\n  }\n\n  render() {\n    return (\n      <table className=\"graph-legend\">\n        <tbody>\n          {this.props.series.map((s: any) => {return this.renderLegendItem(s)})}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nexport default Legend;\n","import $ from 'jquery';\nimport React, { PureComponent } from 'react';\nimport ReactResizeDetector from 'react-resize-detector';\nimport { Alert } from 'reactstrap';\n\nimport Legend from './Legend';\n\nrequire('flot');\nrequire('flot/source/jquery.flot.crosshair');\nrequire('flot/source/jquery.flot.legend');\nrequire('flot/source/jquery.flot.time');\nrequire('flot/source/jquery.canvaswrapper');\nrequire('jquery.flot.tooltip');\n\nvar graphID = 0;\nfunction getGraphID() {\n  // TODO: This is ugly.\n  return graphID++;\n}\n\ninterface GraphProps {\n  data: any; // TODO: Type this.\n  stacked: boolean;\n  queryParams: {\n    startTime: number,\n    endTime: number,\n    resolution: number,\n  } | null;\n}\n\nclass Graph extends PureComponent<GraphProps> {\n  private id: number = getGraphID();\n  private chartRef = React.createRef<HTMLDivElement>();\n\n  escapeHTML(str: string) {\n    var entityMap: {[key: string]: string} = {\n      '&': '&amp;',\n      '<': '&lt;',\n      '>': '&gt;',\n      '\"': '&quot;',\n      \"'\": '&#39;',\n      '/': '&#x2F;'\n    };\n\n    return String(str).replace(/[&<>\"'/]/g, function (s) {\n      return entityMap[s];\n    });\n  }\n\n  renderLabels(labels: {[key: string]: string}) {\n    let labelStrings: string[] = [];\n    for (let label in labels) {\n      if (label !== '__name__') {\n        labelStrings.push('<strong>' + label + '</strong>: ' + this.escapeHTML(labels[label]));\n      }\n    }\n    return '<div class=\"labels\">' + labelStrings.join('<br>') + '</div>';\n  };\n\n  formatValue = (y: number | null): string => {\n    if (y === null) {\n      return 'null';\n    }\n    var abs_y = Math.abs(y);\n    if (abs_y >= 1e24) {\n      return (y / 1e24).toFixed(2) + \"Y\";\n    } else if (abs_y >= 1e21) {\n      return (y / 1e21).toFixed(2) + \"Z\";\n    } else if (abs_y >= 1e18) {\n      return (y / 1e18).toFixed(2) + \"E\";\n    } else if (abs_y >= 1e15) {\n      return (y / 1e15).toFixed(2) + \"P\";\n    } else if (abs_y >= 1e12) {\n      return (y / 1e12).toFixed(2) + \"T\";\n    } else if (abs_y >= 1e9) {\n      return (y / 1e9).toFixed(2) + \"G\";\n    } else if (abs_y >= 1e6) {\n      return (y / 1e6).toFixed(2) + \"M\";\n    } else if (abs_y >= 1e3) {\n      return (y / 1e3).toFixed(2) + \"k\";\n    } else if (abs_y >= 1) {\n      return y.toFixed(2)\n    } else if (abs_y === 0) {\n      return y.toFixed(2)\n    } else if (abs_y <= 1e-24) {\n      return (y / 1e-24).toFixed(2) + \"y\";\n    } else if (abs_y <= 1e-21) {\n      return (y / 1e-21).toFixed(2) + \"z\";\n    } else if (abs_y <= 1e-18) {\n      return (y / 1e-18).toFixed(2) + \"a\";\n    } else if (abs_y <= 1e-15) {\n      return (y / 1e-15).toFixed(2) + \"f\";\n    } else if (abs_y <= 1e-12) {\n      return (y / 1e-12).toFixed(2) + \"p\";\n    } else if (abs_y <= 1e-9) {\n      return (y / 1e-9).toFixed(2) + \"n\";\n    } else if (abs_y <= 1e-6) {\n      return (y / 1e-6).toFixed(2) + \"µ\";\n    } else if (abs_y <=1e-3) {\n      return (y / 1e-3).toFixed(2) + \"m\";\n    } else if (abs_y <= 1) {\n      return y.toFixed(2)\n    }\n    throw Error(\"couldn't format a value, this is a bug\");\n  }\n\n  getOptions(): any {\n    return {\n      grid: {\n        hoverable: true,\n        clickable: true,\n        autoHighlight: true,\n        mouseActiveRadius: 100,\n      },\n      legend: {\n        show: false,\n      },\n      xaxis: {\n        mode: 'time',\n        showTicks: true,\n        showMinorTicks: true,\n        timeBase: 'milliseconds',\n      },\n      yaxis: {\n        tickFormatter: this.formatValue,\n      },\n      crosshair: {\n        mode: 'xy',\n        color: '#bbb',\n      },\n      tooltip: {\n        show: true,\n        cssClass: 'graph-tooltip',\n        content: (label: string, xval: number, yval: number, flotItem: any) => {\n          const series = flotItem.series; // TODO: type this.\n          var date = '<span class=\"date\">' + new Date(xval).toUTCString() + '</span>';\n          var swatch = '<span class=\"detail-swatch\" style=\"background-color: ' + series.color + '\"></span>';\n          var content = swatch + (series.labels.__name__ || 'value') + \": <strong>\" + yval + '</strong>';\n          return date + '<br>' + content + '<br>' + this.renderLabels(series.labels);\n        },\n        defaultTheme: false,\n        lines: true,\n      },\n      series: {\n        stack: this.props.stacked,\n        lines: {\n          lineWidth: this.props.stacked ? 1 : 2,\n          steps: false,\n          fill: this.props.stacked,\n        },\n        shadowSize: 0,\n      }\n    };\n  }\n\n  // This was adapted from Flot's color generation code.\n  getColors() {\n    let colors = [];\n    const colorPool = [\"#edc240\", \"#afd8f8\", \"#cb4b4b\", \"#4da74d\", \"#9440ed\"];\n    const colorPoolSize = colorPool.length;\n    let variation = 0;\n    const neededColors = this.props.data.result.length;\n\n    for (let i = 0; i < neededColors; i++) {\n      const c = ($ as any).color.parse(colorPool[i % colorPoolSize] || \"#666\");\n\n      // Each time we exhaust the colors in the pool we adjust\n      // a scaling factor used to produce more variations on\n      // those colors. The factor alternates negative/positive\n      // to produce lighter/darker colors.\n\n      // Reset the variation after every few cycles, or else\n      // it will end up producing only white or black colors.\n\n      if (i % colorPoolSize === 0 && i) {\n        if (variation >= 0) {\n          if (variation < 0.5) {\n            variation = -variation - 0.2;\n          } else variation = 0;\n        } else variation = -variation;\n      }\n\n      colors[i] = c.scale('rgb', 1 + variation);\n    }\n\n    return colors;\n  }\n\n  getData() {\n    const colors = this.getColors();\n\n    return this.props.data.result.map((ts: any /* TODO: Type this*/, index: number) => {\n      // Insert nulls for all missing steps.\n      let data = [];\n      let pos = 0;\n      const params = this.props.queryParams!;\n\n      for (let t = params.startTime; t <= params.endTime; t += params.resolution) {\n        // Allow for floating point inaccuracy.\n        if (ts.values.length > pos && ts.values[pos][0] < t + params.resolution / 100) {\n          data.push([ts.values[pos][0] * 1000, this.parseValue(ts.values[pos][1])]);\n          pos++;\n        } else {\n          // TODO: Flot has problems displaying intermittent \"null\" values when stacked,\n          // resort to 0 now. In Grafana this works for some reason, figure out how they\n          // do it.\n          data.push([t * 1000, this.props.stacked ? 0 : null]);\n        }\n      }\n\n      return {\n        labels: ts.metric !== null ? ts.metric : {},\n        data: data,\n        color: colors[index],\n        index: index,\n      };\n    })\n  }\n\n  parseValue(value: string) {\n    var val = parseFloat(value);\n    if (isNaN(val)) {\n      // \"+Inf\", \"-Inf\", \"+Inf\" will be parsed into NaN by parseFloat(). They\n      // can't be graphed, so show them as gaps (null).\n\n      // TODO: Flot has problems displaying intermittent \"null\" values when stacked,\n      // resort to 0 now. In Grafana this works for some reason, figure out how they\n      // do it.\n      return this.props.stacked ? 0 : null;\n    }\n    return val;\n  };\n\n  componentDidMount() {\n    this.plot();\n  }\n\n  componentDidUpdate() {\n    this.plot();\n  }\n\n  componentWillUnmount() {\n    this.destroyPlot();\n  }\n\n  plot() {\n    if (this.chartRef.current === null) {\n      return;\n    }\n    this.destroyPlot();\n    $.plot($(this.chartRef.current!), this.getData(), this.getOptions());\n  }\n\n  destroyPlot() {\n    const chart = $(this.chartRef.current!).data('plot');\n    if (chart !== undefined) {\n      chart.destroy();\n    }\n  }\n\n  render() {\n    if (this.props.data === null) {\n      return <Alert color=\"light\">No data queried yet</Alert>;\n    }\n\n    if (this.props.data.resultType !== 'matrix') {\n      return <Alert color=\"danger\">Query result is of wrong type '{this.props.data.resultType}', should be 'matrix' (range vector).</Alert>;\n    }\n\n    if (this.props.data.result.length === 0) {\n      return <Alert color=\"secondary\">Empty query result</Alert>;\n    }\n\n    return (\n      <div className=\"graph\">\n        <ReactResizeDetector handleWidth onResize={() => this.plot()} />\n        <div className=\"graph-chart\" ref={this.chartRef} />\n        <Legend series={this.getData()}/>\n      </div>\n    );\n  }\n}\n\nexport default Graph;\n","import React, { Component } from 'react';\n\nimport {\n  Alert,\n  Button,\n  Col,\n  Nav,\n  NavItem,\n  NavLink,\n  Row,\n  TabContent,\n  TabPane,\n} from 'reactstrap';\n\nimport moment from 'moment-timezone';\n\nimport ExpressionInput from './ExpressionInput';\nimport GraphControls from './GraphControls';\nimport Graph from './Graph';\nimport DataTable from './DataTable';\nimport TimeInput from './TimeInput';\n\ninterface PanelProps {\n  options: PanelOptions;\n  onOptionsChanged: (opts: PanelOptions) => void;\n  metricNames: string[];\n  removePanel: () => void;\n}\n\ninterface PanelState {\n  data: any; // TODO: Type data.\n  lastQueryParams: { // TODO: Share these with Graph.tsx in a file.\n    startTime: number,\n    endTime: number,\n    resolution: number,\n  } | null;\n  loading: boolean;\n  error: string | null;\n  stats: null; // TODO: Stats.\n}\n\nexport interface PanelOptions {\n  expr: string;\n  type: PanelType;\n  range: number; // Range in seconds.\n  endTime: number | null; // Timestamp in milliseconds.\n  resolution: number | null; // Resolution in seconds.\n  stacked: boolean;\n}\n\nexport enum PanelType {\n  Graph = 'graph',\n  Table = 'table',\n}\n\nexport const PanelDefaultOptions: PanelOptions = {\n  type: PanelType.Table,\n  expr: '',\n  range: 3600,\n  endTime: null,\n  resolution: null,\n  stacked: false,\n}\n\nclass Panel extends Component<PanelProps, PanelState> {\n  private abortInFlightFetch: (() => void) | null = null;\n\n  constructor(props: PanelProps) {\n    super(props);\n\n    this.state = {\n      data: null,\n      lastQueryParams: null,\n      loading: false,\n      error: null,\n      stats: null,\n    };\n  }\n\n  componentDidUpdate(prevProps: PanelProps, prevState: PanelState) {\n    const prevOpts = prevProps.options;\n    const opts = this.props.options;\n    if (prevOpts.type !== opts.type ||\n        prevOpts.range !== opts.range ||\n        prevOpts.endTime !== opts.endTime ||\n        prevOpts.resolution !== opts.resolution) {\n\n      if (prevOpts.type !== opts.type) {\n        // If the other options change, we still want to show the old data until the new\n        // query completes, but this is not a good idea when we actually change between\n        // table and graph view, since not all queries work well in both.\n        this.setState({data: null});\n      }\n      this.executeQuery(opts.expr);\n    }\n  }\n\n  componentDidMount() {\n    this.executeQuery(this.props.options.expr);\n  }\n\n  executeQuery = (expr: string): void => {\n    if (this.props.options.expr !== expr) {\n      this.setOptions({expr: expr});\n    }\n    if (expr === '') {\n      return;\n    }\n\n    if (this.abortInFlightFetch) {\n      this.abortInFlightFetch();\n      this.abortInFlightFetch = null;\n    }\n\n    const abortController = new AbortController();\n    this.abortInFlightFetch = () => abortController.abort();\n    this.setState({loading: true});\n\n    const endTime = this.getEndTime().valueOf() / 1000; // TODO: shouldn't valueof only work when it's a moment?\n    const startTime = endTime - this.props.options.range;\n    const resolution = this.props.options.resolution || Math.max(Math.floor(this.props.options.range / 250), 1);\n\n    const url = new URL(window.location.href);\n    const params: {[key: string]: string} = {\n      'query': expr,\n    };\n\n    switch (this.props.options.type) {\n      case 'graph':\n        url.pathname = '../../api/v1/query_range'\n        Object.assign(params, {\n          start: startTime,\n          end: endTime,\n          step: resolution,\n        })\n        // TODO path prefix here and elsewhere.\n        break;\n      case 'table':\n        url.pathname = '../../api/v1/query'\n        Object.assign(params, {\n          time: endTime,\n        })\n        break;\n      default:\n        throw new Error('Invalid panel type \"' + this.props.options.type + '\"');\n    }\n    Object.keys(params).forEach(key => url.searchParams.append(key, params[key]))\n\n    fetch(url.toString(), {cache: 'no-store', signal: abortController.signal})\n    .then(resp => resp.json())\n    .then(json => {\n      if (json.status !== 'success') {\n        throw new Error(json.error || 'invalid response JSON');\n      }\n\n      this.setState({\n        error: null,\n        data: json.data,\n        lastQueryParams: {\n          startTime: startTime,\n          endTime: endTime,\n          resolution: resolution,\n        },\n        loading: false,\n      });\n      this.abortInFlightFetch = null;\n    })\n    .catch(error => {\n      if (error.name === 'AbortError') {\n        // Aborts are expected, don't show an error for them.\n        return\n      }\n      this.setState({\n        error: 'Error executing query: ' + error.message,\n        loading: false,\n      })\n    });\n  }\n\n  setOptions(opts: object): void {\n    const newOpts = {...this.props.options, ...opts};\n    this.props.onOptionsChanged(newOpts);\n  }\n\n  handleExpressionChange = (expr: string): void => {\n    this.setOptions({expr: expr});\n  }\n\n  handleChangeRange = (range: number): void => {\n    this.setOptions({range: range});\n  }\n\n  getEndTime = (): number | moment.Moment => {\n    if (this.props.options.endTime === null) {\n      return moment();\n    }\n    return this.props.options.endTime;\n  }\n\n  handleChangeEndTime = (endTime: number | null) => {\n    this.setOptions({endTime: endTime});\n  }\n\n  handleChangeResolution = (resolution: number | null) => {\n    this.setOptions({resolution: resolution});\n  }\n\n  handleChangeStacking = (stacked: boolean) => {\n    this.setOptions({stacked: stacked});\n  }\n\n  render() {\n    return (\n      <div className=\"panel\">\n        <Row>\n          <Col>\n            <ExpressionInput\n              value={this.props.options.expr}\n              executeQuery={this.executeQuery}\n              loading={this.state.loading}\n              metricNames={this.props.metricNames}\n            />\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            {this.state.error && <Alert color=\"danger\">{this.state.error}</Alert>}\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <Nav tabs>\n              <NavItem>\n                <NavLink\n                  className={this.props.options.type === 'table' ? 'active' : ''}\n                  onClick={() => { this.setOptions({type: 'table'}); }}\n                >\n                  Table\n                </NavLink>\n              </NavItem>\n              <NavItem>\n                <NavLink\n                  className={this.props.options.type === 'graph' ? 'active' : ''}\n                  onClick={() => { this.setOptions({type: 'graph'}); }}\n                >\n                  Graph\n                </NavLink>\n              </NavItem>\n            </Nav>\n            <TabContent activeTab={this.props.options.type}>\n              <TabPane tabId=\"table\">\n                {this.props.options.type === 'table' &&\n                  <>\n                    <div className=\"table-controls\">\n                      <TimeInput\n                        time={this.props.options.endTime}\n                        range={this.props.options.range}\n                        placeholder=\"Evaluation time\"\n                        onChangeTime={this.handleChangeEndTime}\n                      />\n                    </div>\n                    <DataTable data={this.state.data} />\n                  </>\n                }\n              </TabPane>\n              <TabPane tabId=\"graph\">\n                {this.props.options.type === 'graph' &&\n                  <>\n                    <GraphControls\n                      range={this.props.options.range}\n                      endTime={this.props.options.endTime}\n                      resolution={this.props.options.resolution}\n                      stacked={this.props.options.stacked}\n\n                      onChangeRange={this.handleChangeRange}\n                      onChangeEndTime={this.handleChangeEndTime}\n                      onChangeResolution={this.handleChangeResolution}\n                      onChangeStacking={this.handleChangeStacking}\n                    />\n                    <Graph data={this.state.data} stacked={this.props.options.stacked} queryParams={this.state.lastQueryParams} />\n                  </>\n                }\n              </TabPane>\n            </TabContent>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <Button className=\"float-right\" color=\"link\" onClick={this.props.removePanel} size=\"sm\">Remove Panel</Button>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default Panel;\n","import React, { PureComponent, ReactNode } from 'react';\n\nimport { Alert, Table } from 'reactstrap';\n\nimport SeriesName from './SeriesName';\n\nexport interface QueryResult {\n  data: null | {\n    resultType: 'vector',\n    result: InstantSample[],\n  } | {\n    resultType: 'matrix',\n    result: RangeSamples[],\n  } | {\n    resultType: 'scalar',\n    result: SampleValue,\n  } | {\n    resultType: 'string',\n    result: string,\n  },\n};\n\ninterface InstantSample {\n  metric: Metric,\n  value: SampleValue,\n}\n\ninterface RangeSamples {\n  metric: Metric,\n  values: SampleValue[],\n}\n\ninterface Metric {\n  [key: string]: string,\n}\n\ntype SampleValue = [number, string];\n\nclass DataTable extends PureComponent<QueryResult> {\n  limitSeries(series: InstantSample[] | RangeSamples[]): InstantSample[] | RangeSamples[] {\n    const maxSeries = 10000;\n\n    if (series.length > maxSeries) {\n      return series.slice(0, maxSeries);\n    }\n    return series;\n  }\n\n  render() {\n    const data = this.props.data;\n\n    if (data === null) {\n      return <Alert color=\"light\">No data queried yet</Alert>;\n    }\n\n    if (data.result === null || data.result.length === 0) {\n      return <Alert color=\"secondary\">Empty query result</Alert>;\n    }\n\n    let rows: ReactNode[] = [];\n    let limited = false;\n    switch(data.resultType) {\n      case 'vector':\n        rows = (this.limitSeries(data.result) as InstantSample[])\n          .map((s: InstantSample, index: number): ReactNode => {\n            return <tr key={index}><td><SeriesName labels={s.metric} format={false}/></td><td>{s.value[1]}</td></tr>;\n          });\n        limited = rows.length !== data.result.length;\n        break;\n      case 'matrix':\n        rows = (this.limitSeries(data.result) as RangeSamples[])\n          .map((s, index) => {\n            const valueText = s.values.map((v) => {\n              return [1] + ' @' + v[0];\n            }).join('\\n');\n            return <tr style={{whiteSpace: 'pre'}} key={index}><td><SeriesName labels={s.metric} format={false}/></td><td>{valueText}</td></tr>;\n          });\n        limited = rows.length !== data.result.length;\n        break;\n      case 'scalar':\n        rows.push(<tr><td>scalar</td><td>{data.result[1]}</td></tr>);\n        break;\n      case 'string':\n        rows.push(<tr><td>scalar</td><td>{data.result[1]}</td></tr>);\n        break;\n      default:\n        return <Alert color=\"danger\">Unsupported result value type</Alert>;\n    }\n\n    return (\n      <>\n        {limited &&\n          <Alert color=\"danger\">\n            <strong>Warning:</strong> Fetched {data.result.length} metrics, only displaying first {rows.length}.\n          </Alert>\n        }\n        <Table hover size=\"sm\" className=\"data-table\">\n          <tbody>\n            {rows}\n          </tbody>\n        </Table>\n      </>\n    );\n  }\n}\n\nexport default DataTable;\n","import { parseRange, parseTime, formatRange, formatTime } from './timeFormat';\nimport { PanelOptions, PanelType, PanelDefaultOptions } from '../Panel';\n\nexport function decodePanelOptionsFromQueryString(query: string): {key: string, options: PanelOptions}[] {\n  if (query === '') {\n    return [];\n  }\n\n  const params = query.substring(1).split('&');\n  return parseParams(params);\n}\n\nconst paramFormat = /^g\\d+\\..+=.+$/;\n\ninterface IncompletePanelOptions {\n  expr?: string;\n  type?: PanelType;\n  range?: number;\n  endTime?: number | null;\n  resolution?: number | null;\n  stacked?: boolean;\n}\n\nfunction parseParams(params: string[]): {key: string, options: PanelOptions}[] {\n  const sortedParams = params.filter((p) => {\n    return paramFormat.test(p);\n  }).sort();\n\n  let panelOpts: {key: string, options: PanelOptions}[] = [];\n\n  let key = 0;\n  let options: IncompletePanelOptions = {};\n  for (const p of sortedParams) {\n    const prefix = 'g' + key + '.';\n\n    if (!p.startsWith(prefix)) {\n      panelOpts.push({\n        key: key.toString(),\n        options: {...PanelDefaultOptions, ...options},\n      });\n      options = {};\n      key++;\n    }\n\n    addParam(options, p.substring(prefix.length));\n  }\n  panelOpts.push({\n    key: key.toString(),\n    options: {...PanelDefaultOptions, ...options},\n  });\n\n  return panelOpts;\n}\n\nfunction addParam(opts: IncompletePanelOptions, param: string): void {\n  let [ opt, val ] = param.split('=');\n  val = decodeURIComponent(val.replace(/\\+/g, ' '));\n\n  switch(opt) {\n    case 'expr':\n      opts.expr = val;\n      break;\n\n    case 'tab':\n      if (val === '0') {\n        opts.type = PanelType.Graph;\n      } else {\n        opts.type = PanelType.Table;\n      }\n      break;\n\n    case 'stacked':\n      opts.stacked = val === '1';\n      break;\n\n    case 'range_input':\n      const range = parseRange(val);\n      if (range !== null) {\n        opts.range = range;\n      }\n      break;\n\n    case 'end_input':\n      opts.endTime = parseTime(val);\n      break;\n\n    case 'step_input':\n      const res = parseInt(val);\n      if (res > 0) {\n        opts.resolution = res;\n      }\n      break;\n\n    case 'moment_input':\n      opts.endTime = parseTime(val);\n      break;\n  }\n}\n\nexport function encodePanelOptionsToQueryString(panels: {key: string, options: PanelOptions}[]): string {\n  const queryParams: string[] = [];\n\n  panels.forEach(p => {\n    const prefix = 'g' + p.key + '.';\n    const o = p.options;\n    const panelParams: {[key: string]: string | undefined} = {\n      'expr': o.expr,\n      'tab': o.type === PanelType.Graph ? '0' : '1',\n      'stacked': o.stacked ? '1' : '0',\n      'range_input': formatRange(o.range),\n      'end_input': o.endTime !== null ? formatTime(o.endTime) : undefined,\n      'moment_input': o.endTime !== null ? formatTime(o.endTime) : undefined,\n      'step_input': o.resolution !== null ? o.resolution.toString() : undefined,\n    };\n\n    for (let o in panelParams) {\n      const pp = panelParams[o];\n      if (pp !== undefined) {\n        queryParams.push(prefix + o + '=' + encodeURIComponent(pp));\n      }\n    }\n  })\n\n  return '?' + queryParams.join('&');\n}\n","import React, { Component } from 'react';\n\nimport { Alert, Button, Col, Row } from 'reactstrap';\n\nimport Panel, { PanelOptions, PanelDefaultOptions } from './Panel';\nimport { decodePanelOptionsFromQueryString, encodePanelOptionsToQueryString } from './utils/urlParams';\n\ninterface PanelListState {\n  panels: {\n    key: string;\n    options: PanelOptions;\n  }[],\n  metricNames: string[];\n  fetchMetricsError: string | null;\n  timeDriftError: string | null;\n}\n\nclass PanelList extends Component<any, PanelListState> {\n  private key: number = 0;\n\n  constructor(props: any) {\n    super(props);\n\n    const urlPanels = decodePanelOptionsFromQueryString(window.location.search);\n\n    this.state = {\n      panels: urlPanels.length !== 0 ? urlPanels : [\n        {\n          key: this.getKey(),\n          options: PanelDefaultOptions,\n        },\n      ],\n      metricNames: [],\n      fetchMetricsError: null,\n      timeDriftError: null,\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"../../api/v1/label/__name__/values\", {cache: \"no-store\"})\n    .then(resp => {\n      if (resp.ok) {\n        return resp.json();\n      } else {\n        throw new Error('Unexpected response status when fetching metric names: ' + resp.statusText); // TODO extract error\n      }\n    })\n    .then(json => this.setState({ metricNames: json.data }))\n    .catch(error => this.setState({ fetchMetricsError: error.message }));\n\n    const browserTime = new Date().getTime() / 1000;\n    fetch(\"../../api/v1/query?query=time()\", {cache: \"no-store\"})\n    .then(resp => {\n      if (resp.ok) {\n        return resp.json();\n      } else {\n        throw new Error('Unexpected response status when fetching metric names: ' + resp.statusText); // TODO extract error\n      }\n    })\n    .then(json => {\n      const serverTime = json.data.result[0];\n      const delta = Math.abs(browserTime - serverTime);\n\n      if (delta >= 30) {\n        throw new Error('Detected ' + delta + ' seconds time difference between your browser and the server. Prometheus relies on accurate time and time drift might cause unexpected query results.');\n      }\n    })\n    .catch(error => this.setState({ timeDriftError: error.message }));\n\n    window.onpopstate = () => {\n      const panels = decodePanelOptionsFromQueryString(window.location.search);\n      if (panels.length !== 0) {\n        this.setState({panels: panels});\n      }\n    }\n  }\n\n  getKey(): string {\n    return (this.key++).toString();\n  }\n\n  handleOptionsChanged(key: string, opts: PanelOptions): void {\n    const newPanels = this.state.panels.map(p => {\n      if (key === p.key) {\n        return {\n          key: key,\n          options: opts,\n        }\n      }\n      return p;\n    });\n    this.setState({panels: newPanels}, this.updateURL)\n  }\n\n  updateURL(): void {\n    const query = encodePanelOptionsToQueryString(this.state.panels);\n    window.history.pushState({}, '', query);\n  }\n\n  addPanel = (): void => {\n    const panels = this.state.panels.slice();\n    panels.push({\n      key: this.getKey(),\n      options: PanelDefaultOptions,\n    });\n    this.setState({panels: panels}, this.updateURL);\n  }\n\n  removePanel = (key: string): void => {\n    const panels = this.state.panels.filter(panel => {\n      return panel.key !== key;\n    });\n    this.setState({panels: panels}, this.updateURL);\n  }\n\n  render() {\n    return (\n      <>\n        <Row>\n          <Col>\n            {this.state.timeDriftError && <Alert color=\"danger\"><strong>Warning:</strong> Error fetching server time: {this.state.timeDriftError}</Alert>}\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            {this.state.fetchMetricsError && <Alert color=\"danger\"><strong>Warning:</strong> Error fetching metrics list: {this.state.fetchMetricsError}</Alert>}\n          </Col>\n        </Row>\n        {this.state.panels.map(p =>\n          <Panel\n            key={p.key}\n            options={p.options}\n            onOptionsChanged={(opts: PanelOptions) => this.handleOptionsChanged(p.key, opts)}\n            removePanel={() => this.removePanel(p.key)}\n            metricNames={this.state.metricNames}\n          />\n        )}\n        <Button color=\"primary\" className=\"add-panel-btn\" onClick={this.addPanel}>Add Panel</Button>\n      </>\n    );\n  }\n}\n\nexport default PanelList;\n","import React, { Component } from 'react';\n\nimport { Container } from 'reactstrap';\n\nimport PanelList from './PanelList';\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Container fluid={true}>\n        <PanelList />\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","import './globals';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}